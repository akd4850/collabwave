<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.myapp.mapper.EmpMapper">
	
	<resultMap type="EmpDto" id="EmpDtoMap">
	    <id property="empCode" column="EMP_CODE" />
	    <result property="empName" column="EMP_NAME" />
	    <result property="password" column="PASSWORD" />
	    <result property="phone" column="PHONE" />
	    <result property="mobile" column="MOBILE" />
	    <result property="email" column="EMAIL" />
	    <result property="address" column="ADDRESS" />
	    <result property="detailAddress" column="DETAIL_ADDRESS" />
	    <result property="signFileName" column="SIGN_FILE_NAME" />
	    <result property="profileFileName" column="PROFILE_FILE_NAME" />
	    <result property="statusCode" column="STATUS_CODE" />
	    <result property="zipCode" column="ZIP_CODE" />
	    <result property="birthdayDate" column="BIRTHDAY_DATE" />
	    <result property="joinDate" column="JOIN_DATE" />
	    <result property="leaveDate" column="LEAVE_DATE" />
	    <result property="passwordModifyDatetime" column="PASSWORD_MODIFY_DATETIME" />
	    <association property="dept" javaType="DeptDto">
	    	<id property="deptCode" column="DEPT_CODE" />
	    	<result property="deptName" column="DEPT_NAME" />
	    	<result property="deptLeaderEmpCode" column="DEPT_LEADER_EMP_CODE" />
    	</association>
    	<association property="position" javaType="PositionDto">
	    	<id property="positionCode" column="POSITION_CODE" />
	    	<result property="positionName" column="POSITION_NAME" />
    	</association>
	</resultMap>
	
  <select id="getEmpByMap"
          parameterType="Map"
          resultType="EmpDto">
    SELECT EMP_CODE, DEPT_CODE, POSITION_CODE, PASSWORD, EMP_NAME, PHONE,
    	   MOBILE, EMAIL, ZIP_CODE, ADDRESS, DETAIL_ADDRESS, BIRTHDAY_DATE,
    	   JOIN_DATE, SIGN_FILE_NAME, PASSWORD_MODIFY_DATETIME, STATUS_CODE, LEAVE_DATE
      FROM EMP_T
     WHERE EMP_CODE = #{empCode} AND PASSWORD = #{pw}
  </select>
  
  <select id="getEmpCount"
  	      resultType="int">
    SELECT COUNT(*)
      FROM EMP_T
     WHERE STATUS_CODE IN ('s01', 's02') 
  </select>
  
  <select id="getEmpList"
  	      parameterType="Map"
  	      resultMap="EmpDtoMap">
  	SELECT EMP_CODE, EMP_NAME, DEPT_NAME, POSITION_NAME, MOBILE, EMAIL, STATUS_CODE, JOIN_DATE
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY EMP_CODE ASC) AS RN, E.EMP_CODE, E.EMP_NAME, D.DEPT_NAME, P.POSITION_NAME, E.MOBILE, E.EMAIL, E.STATUS_CODE, E.JOIN_DATE
              FROM EMP_T E LEFT JOIN DEPT_T D
                ON E.DEPT_CODE = D.DEPT_CODE
             INNER JOIN POSITION_T P
                ON E.POSITION_CODE = P.POSITION_CODE
             WHERE STATUS_CODE IN ('s01', 's02'))
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <select id="getSearchList"
  	      parameterType="Map"
          resultMap="EmpDtoMap">
  	SELECT EMP_CODE, EMP_NAME, DEPT_NAME, POSITION_NAME, MOBILE, EMAIL, STATUS_CODE
      FROM(SELECT ROW_NUMBER() OVER(ORDER BY E.EMP_CODE DESC) AS RN, E.EMP_CODE, E.EMP_NAME, D.DEPT_NAME, P.POSITION_NAME, E.MOBILE, E.EMAIL, E.STATUS_CODE
             FROM EMP_T E LEFT JOIN DEPT_T D
               ON E.DEPT_CODE = D.DEPT_CODE
            INNER JOIN POSITION_T P
               ON E.POSITION_CODE = P.POSITION_CODE
            WHERE STATUS_CODE IN ('s01', 's02')
              AND E.EMP_NAME LIKE CONCAT(CONCAT('%', #{query}), '%'))
    WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <select id="getSearchCount"
          parameterType="Map"
          resultType="int">
    SELECT COUNT(*)
      FROM EMP_T        	
	 WHERE EMP_NAME LIKE '%' || #{query} || '%'
  </select>
  
  <select id="getEmpDetail"
  		  parameterType="Map"
  		  resultMap="EmpDtoMap">
    SELECT E.EMP_CODE, E.EMP_NAME, E.PASSWORD, E.BIRTHDAY_DATE, E.JOIN_DATE, 
           D.DEPT_CODE, D.DEPT_NAME, P.POSITION_CODE, P.POSITION_NAME, E.ZIP_CODE,
           E.ADDRESS, E.DETAIL_ADDRESS, E.MOBILE, E.PHONE, E.EMAIL
      FROM EMP_T E
           LEFT JOIN DEPT_T  D ON E.DEPT_CODE = D.DEPT_CODE
           INNER JOIN POSITION_T P ON E.POSITION_CODE = P.POSITION_CODE
     WHERE E.EMP_CODE = #{empCode}
  </select>
  
  <insert id="insertEmployee">
    INSERT INTO EMP_T (
        EMP_CODE, EMP_NAME, PASSWORD
      , DEPT_CODE, POSITION_CODE
      , PHONE, MOBILE, EMAIL
      , ZIP_CODE, ADDRESS, DETAIL_ADDRESS
      , BIRTHDAY_DATE, JOIN_DATE
      , STATUS_CODE
      ) VALUES (
          #{empCode}, #{empName}, #{password}
        , #{deptCode}, #{positionCode}
        , #{phone}, #{mobile}, #{email}
        , #{zipCode}, #{address}, #{detailAddress}
        , #{birthdayDate}, #{joinDate}
        , 's01'
      )
  </insert>
  
  <update id="updateEmp"
          parameterType="EmpDto">
	UPDATE EMP_T
	   SET EMP_NAME = #{empName},
	       BIRTHDAY_DATE = #{birthdayDate},
	       DEPT_CODE = #{deptCode},
	       POSITION_CODE = #{positionCode},
	       JOIN_DATE = #{joinDate},
	       PHONE = #{phone},
	       MOBILE = #{mobile},
	       EMAIL = #{email},
	       ZIP_CODE = #{zipCode},
	       ADDRESS = #{address},
		   DETAIL_ADDRESS = #{detailAddress}
	 WHERE EMP_CODE= #{empCode}
  </update>
  
  <update id="removeEmp">
	UPDATE EMP_T
	   SET STATUS_CODE = 's03',
	       LEAVE_DATE = CURRENT_DATE
	 WHERE EMP_CODE = #{empCode}
  </update>

  <select id="getDeptListByMap"
   		  parameterType="Map"
   		  resultType="DeptDto">
    SELECT D.DEPT_NAME, D.DEPT_CODE, D.DEPT_LEADER_EMP_NO, 
       (SELECT COUNT(*)
          FROM EMP_T E
         WHERE D.DEPT_CODE = E.DEPT_CODE) AS DEPT_HEADCOUNT,
       DEPT_CREATEDATE
      FROM DEPT_T D;
  </select>
  
  <update id="registerSign" parameterType="EmpDto">
	UPDATE EMP_T SET SIGN_FILE_NAME = #{signFileName} WHERE EMP_CODE = #{empCode}
  </update>
  
  <update id="updateInfo">
	UPDATE EMP_T
	   SET PHONE = #{phone},
	       MOBILE = #{mobile},
	       EMAIL = #{email},
	       ZIP_CODE = #{zipCode},
	       ADDRESS = #{address},
		   DETAIL_ADDRESS = #{detailAddress}
	 WHERE EMP_CODE= #{empCode}
  </update>

  <update id="updateProfile"
  				parameterType="Map">
	UPDATE EMP_T
	   SET PROFILE_FILE_NAME = #{profileFileName}
	 WHERE EMP_CODE = #{empCode}
  </update>
  
  <select id="getEmpLeaveList"
  	      parameterType="Map"
  	      resultMap="EmpDtoMap">
  	SELECT EMP_CODE, EMP_NAME, DEPT_NAME, POSITION_NAME, MOBILE, STATUS_CODE, JOIN_DATE, LEAVE_DATE
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY E.LEAVE_DATE DESC) AS RN, E.EMP_CODE, E.EMP_NAME, 
                   D.DEPT_NAME, P.POSITION_NAME, E.MOBILE, E.STATUS_CODE, E.JOIN_DATE, E.LEAVE_DATE
              FROM EMP_T E
             INNER JOIN DEPT_T D ON E.DEPT_CODE = D.DEPT_CODE
             INNER JOIN POSITION_T P ON E.POSITION_CODE = P.POSITION_CODE
             WHERE STATUS_CODE = 's03')
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>
  
  <select id="getEmpLeaveCount"
  	      resultType="int">
    SELECT COUNT(*)
      FROM EMP_T
     WHERE STATUS_CODE ='s03'
  </select>
  
  <update id="empDeptTransfer">
	UPDATE EMP_T
	   SET DEPT_CODE = #{deptCode}
	 WHERE EMP_CODE = #{empCode}
	   AND EMP_CODE NOT IN (SELECT DEPT_LEADER_EMP_CODE
	                          FROM DEPT_T)	
  </update>
  
  <!-- 발령대기자 -->
  <select id="getWaitingPerson">
    SELECT EMP_CODE, EMP_NAME
	  FROM EMP_T
	 WHERE DEPT_CODE IS NULL
     ORDER BY EMP_CODE
  </select>
  
  <!-- 부서장 부서발령 -->
  <update id="deptLeaderAppointmnet">
	UPDATE EMP_T
	   SET DEPT_CODE = #{deptCode}
	 WHERE EMP_CODE = #{empCode}
  </update>
  
</mapper>